"""
Generates SQL queries from preprocessed inputs using Google Gemini Pro and advanced prompt engineering.

@module: sql_generator
@description: Generates SQL queries from preprocessed inputs (intent, entities, conditions, aggregations, time range, limit) and the given database schema.
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv
import sqlparse

# Load environment variables
load_dotenv()

# Configure the Gemini Pro API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))


def generate_sql_with_gemini(preprocessed_query, db_schema):
    """
    Generates an SQL query using Google Gemini Pro based on the preprocessed query and the database schema.
    """

    intent = preprocessed_query.get("intent")
    entities = preprocessed_query.get("entities", [])
    conditions = preprocessed_query.get("conditions", [])
    aggregations = preprocessed_query.get("aggregations", [])
    time_range = preprocessed_query.get("time_range", "null")
    limit = preprocessed_query.get("limit", "null")

    # Define a dynamic prompt with improved examples
    prompt = f"""
    You are an expert SQL query generator.

    You have the schema of a database, and based on the user's natural language query, you need to generate the appropriate SQL query. Make sure to join tables based on the database schema and include WHERE conditions when necessary.

    ### Example User Query:
    "Show all employees and their departments"

    ### Expected SQL:
    SELECT Employees.first_name, Employees.last_name, Departments.dept_name
    FROM Employees
    JOIN Departments ON Employees.department_id = Departments.dept_id;

    ### Generate an SQL query based on the following information:
    **Intent:** "{intent}"
    **Entities:** {entities}
    **Conditions:** {conditions}
    **Aggregations:** {aggregations}
    **Time Range:** "{time_range}"
    **Limit:** {limit}

    **Database Schema:**
    {db_schema}

    **SQL Query:**
    """

    try:
        # Create a generative model instance
        model = genai.GenerativeModel("gemini-pro")

        # Send the prompt to Gemini Pro
        response = model.generate_content([prompt])

        # Extract the SQL query generated by Google Gemini
        generated_sql = response.text.strip()

        print(f"⚙️ Generated SQL Query: {generated_sql}")

        # Validate the SQL query using sqlparse
        if validate_sql_query(generated_sql):
            print("✅ SQL query is valid.")
            return generated_sql
        else:
            print("❌ Generated SQL query is invalid.")
            return ""

    except Exception as e:
        print(f"❌ Error during SQL query generation with Gemini Pro: {e}")
        return ""




def validate_sql_query(sql_query):
    """
    Validates the syntax of an SQL query using sqlparse.
    """

    try:
        parsed = sqlparse.parse(sql_query)
        if not parsed or len(parsed) == 0:
            print(f"❌ No valid SQL query found in: {sql_query}")
            return False

        print(f"✅ SQL query is syntactically valid.")
        return True
    except Exception as e:
        print(f"❌ SQL validation error: {e}")
        return False

