"""
Generalized module to handle SQL query generation using Google Gemini Pro based on preprocessed query and database schema.

@module: sql_generator
@description: Generates SQL queries from preprocessed inputs (intent, entities, time range) and the given database schema.
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables (such as Google Gemini API key)
load_dotenv()

# Configure the Gemini Pro API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def generate_sql_with_gemini(preprocessed_query, db_schema):
    """
    Generates an SQL query using Google Gemini Pro based on the preprocessed query and the database schema.

    @param preprocessed_query: dict : The preprocessed query data (intent, entities, time range, limit).
    @param db_schema: dict : The schema of the database (tables and columns).
    @return: str : The generated SQL query.
    """
    # Extract information from the preprocessed query
    cleaned_query = preprocessed_query.get("cleaned_query")
    entities = preprocessed_query.get("entities", [])
    time_range = preprocessed_query.get("time_range")
    intent = preprocessed_query.get("intent")
    limit = preprocessed_query.get("limit", 5)

    # Define a prompt to guide Gemini on how to generate the SQL query
    prompt = [
        """
        You are an expert in generating SQL queries. You will be given a preprocessed query and the database schema.
        Based on the user's intent, entities, time range, and limit, generate the correct SQL query.

        Here is an example schema:
        products(product_id, product_name, ...)
        sales(sale_id, product_id, sale_amount, sale_date, ...)

        Example preprocessed query:
        Intent: "aggregate"
        Entities: ["products", "sales"]
        Time Range: "last month"
        Limit: 5

        Example SQL Output:
        SELECT p.product_name, SUM(s.sale_amount) as total_sales
        FROM products p
        JOIN sales s ON p.product_id = s.product_id
        WHERE s.sale_date >= DATE('now', '-1 month')
        GROUP BY p.product_id
        ORDER BY total_sales DESC
        LIMIT 5;

        Now, generate the SQL query for this preprocessed query:
        """
    ]

    try:
        # Create the structured prompt by adding preprocessed query and schema details
        schema_description = f"Schema: {db_schema}"
        preprocessed_query_description = f"""
        Preprocessed Query:
        Intent: "{intent}"
        Entities: {entities}
        Time Range: "{time_range}"
        Limit: {limit}
        """

        # Send the user prompt, schema, and preprocessed query to Gemini Pro
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content([prompt[0], schema_description, preprocessed_query_description])

        # Extract the SQL query generated by Gemini Pro
        generated_sql = response.text.strip()

        # Return the generated SQL query
        return generated_sql

    except Exception as e:
        print(f"‚ùå Error during SQL query generation with Gemini Pro: {e}")
        return ""

